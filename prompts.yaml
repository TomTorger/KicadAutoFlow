# prompts.yaml - Iteration 3 (Final)
# Prompts used by KicadAutoFlow capabilities and agents.

# Suggests KiCad Footprint based on package/description
suggest_footprint: |
  Analyze the following component details:
  Component Description: "{component_desc}"
  Package Information: "{package_desc}"

  Task: Suggest ONE standard KiCad 7+ footprint name in the precise format 'LibraryName:FootprintName'.
  Prioritize common libraries (Examples: Resistor_SMD, Capacitor_SMD, Package_SO, Package_DIP, Connector_PinHeader_2.54mm, LED_SMD, Diode_SMD, Package_TO_SOT_SMD, Connector_JST).
  Output Examples: Resistor_SMD:R_0805_2012Metric, Package_SO:SOIC-8_3.9x4.9mm_P1.27mm, Connector_JST:JST_XH_B2B-XH-A_1x02_P2.50mm_Vertical.

  If the package info is ambiguous, a standard KiCad library/footprint name does not seem applicable, or you are uncertain, respond ONLY with the single word: None

# Analyzes component image (for LMMs like Gemini Vision)
analyze_component_image: |
  Carefully analyze the primary electronic component shown in the image. Extract the following information and attempt to find a footprint. Respond ONLY with a single JSON object containing these exact keys:
  {{
    "detected_text": "string or null (Concise summary of all distinct text markings)",
    "component_type_guess": "string or null (Best guess: Resistor, Capacitor, IC, Transistor, Diode, LED, Connector, Inductor)",
    "package_guess": "string or null (Best guess: 0805, SOT-23, SOIC-8, DIP-16, TQFP-100, TO-92, etc.)",
    "value_guess": "string or null (Best guess based on markings/type: 10k, 100nF, NE555, 1N4148, etc.)",
    "mounting_type": "string or null (Surface Mount, Through-Hole, or Unknown)",
    "quantity": "integer (Best guess for quantity, e.g., 1, 2, 4, etc.. Please look for hints in the picture as to how many of the part you would say it indicates)",
    "footprint_suggestion": "string or null (Best guess for a standard KiCad 7+ footprint name, e.g., Resistor_SMD:R_0805_2012Metric, or None)",
    "confidence": "string (Your confidence in these guesses: High, Medium, or Low)"
  }}
  Focus on the most prominent component. Use null if information cannot be determined.

# Checks datasheet text for pin count consistency
check_pin_count: |
  Datasheet Text Snippet (Relevant excerpt):
  ---
  {datasheet_text_snippet}
  ---
  Expected Component Info:
  Package: {package}
  Value/Description: {value_desc}
  Expected Pin Count (from footprint): {expected_pin_count}

  Task: Determine if the datasheet text snippet EXPLICITLY confirms or contradicts the Expected Pin Count ({expected_pin_count}).
  Respond ONLY with a JSON object containing these exact keys:
  {{
    "match": boolean | null (true = explicit match, false = explicit mismatch, null = uncertain/not mentioned),
    "datasheet_pin_count": integer | null (Pin count found in text, or null),
    "confidence": string ("High", "Medium", or "Low"),
    "notes": "string (Brief justification. e.g., 'Text explicitly states 8 pins.', 'Pinout diagram shows 14 pins.', 'Pin count not found in snippet.')"
  }}

# Checks datasheet text for package consistency
check_package_match: |
  Datasheet Text Snippet (Relevant excerpt):
  ---
  {datasheet_text_snippet}
  ---
  Expected Component Info:
  Package: {package}
  Value/Description: {value_desc}

  Task: Determine if the datasheet text snippet EXPLICITLY mentions a package name/type reasonably CONSISTENT with the Expected Package ('{package}')? (e.g., SO-8 matches SOIC-8, TO-92 matches TO-92). Ignore generic terms like 'surface mount'.
  Respond ONLY with a JSON object containing these exact keys:
  {{
    "match": boolean | null (true = consistent, false = clear mismatch, null = uncertain/not mentioned),
    "datasheet_package": string | null (Package name(s) found in text, or null),
    "confidence": string ("High", "Medium", or "Low"),
    "notes": "string (Brief justification. e.g., 'Text mentions SO-8, consistent.', 'Text specifies DIP, expected SOIC - mismatch.', 'No specific package type found.')"
  }}

# Suggests design components/blocks for DesignExplorationAgent
suggest_design_components: |
  Act as an electronics design assistant planning a KiCad project.

  USER GOAL:
  {goal}

  AVAILABLE INVENTORY PARTS (Prioritize using these - Reference by part_id):
  {inventory_summary}

  AVAILABLE REUSABLE SCHEMATIC BLOCKS:
  {block_summary}

  TASK:
  1. Identify needed functional blocks (Power, MCU, Drivers, Interfaces, Connectors).
  2. For each block, recommend specific components/ICs.
     - **MUST** check inventory first. If a suitable part exists, state 'Use Inventory: [part_id] ([description])'.
     - If **NO** suitable inventory part, suggest a common, specific part number (e.g., LM2596S module, TB6612FNG, ULN2003ADR, DS18B20) and mark it '(Needs Sourcing)'.
  3. Recommend REUSABLE SCHEMATIC BLOCKS by name where applicable.
  4. Briefly list conceptual connections between major components/blocks.
  5. Format output clearly using Markdown with headings for each functional block.
